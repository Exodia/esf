// padding & margin
.make-pad(@factor)  {
    .p@{factor} {
        padding: @gutter * @factor;
    }
    .pl@{factor} {
        padding-left: @gutter * @factor;
    }
    .pb@{factor} {
        padding-bottom: @gutter * @factor;
    }
    .pr@{factor} {
        padding-right: @gutter * @factor;
    }
    .pt@{factor} {
        padding-top: @gutter * @factor;
    }
}

.make-margin(@factor)  {
    .m@{factor} {
        margin: @gutter * @factor;
    }
    .ml@{factor} {
        margin-left: @gutter * @factor;
    }
    .mb@{factor} {
        margin-bottom: @gutter * @factor;
    }
    .mr@{factor} {
        margin-right: @gutter * @factor;
    }
    .mt@{factor} {
        margin-top: @gutter * @factor;
    }
}

// border radius
.border-top-radius(@radius) {
    border-top-right-radius: @radius;
    border-top-left-radius: @radius;
}
.border-right-radius(@radius) {
    border-bottom-right-radius: @radius;
    border-top-right-radius: @radius;
}
.border-bottom-radius(@radius) {
    border-bottom-right-radius: @radius;
    border-bottom-left-radius: @radius;
}
.border-left-radius(@radius) {
    border-bottom-left-radius: @radius;
    border-top-left-radius: @radius;
}


.ellipsis(...) {
    overflow: hidden;
}
.ellipsis() {
    text-overflow: ellipsis;
    -o-text-overflow: ellipsis;
    white-space: nowrap;
}
.ellipsis(@line-number) {
    display: -webkit-box;
    -webkit-line-clamp: @line-number;
    -webkit-box-orient: vertical;  
}

.link-like() {
  color: @link-color;
  text-decoration: none;

  &:hover {
    color: @link-hover-color;
    text-decoration: underline;
  }
}

.esf-grid-u {
    display: inline-block;
    *display: inline;
    zoom: 1;
    letter-spacing: normal;
    word-spacing: normal;
    vertical-align: top;
    text-rendering: auto;
}

.make-grid(@grid-columns) {
  .loop-grid-columns(@grid-columns, false, @grid-columns);
}

.make-grid(@grid-columns, @class) {
  .loop-grid-columns(@grid-columns, @class, @grid-columns);
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @total) when (@index >= 0) {
  .calc-grid-column(@index, @class, @total);
  // next iteration
  .loop-grid-columns((@index - 1), @class, @total);
} 

.calc-grid-column(@index, @class, @total) when (isstring(@class)) and (@index > 0) {
    .@{ui-class-prefix}-u-@{class}-@{index}-@{total} {
        width: percentage((@index / @grid-columns));
        // IE < 8 has issues with rounding, reducing the width slightly prevents the
        // grid units from wrapping to the next line.
        *width: percentage((@index / @grid-columns) - 0.00031);
        &:extend(.esf-grid-u all);
    }
}

.calc-grid-column(@index, @class, @total) when (@index > 0) {
    .@{ui-class-prefix}-u-@{index}-@{total} {
        width: percentage((@index / @grid-columns));
        // IE < 8 has issues with rounding, reducing the width slightly prevents the
        // grid units from wrapping to the next line.
        *width: percentage((@index / @grid-columns) - 0.00031);
        &:extend(.esf-grid-u all);
    }
}
